plugins {
    id 'application'
    id 'idea'
}

group 'com.craftinginterpreters'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDir "${buildDir}/generated/main/java"
        }
    }
}

idea {
    module {
        generatedSourceDirs += file "${buildDir}/generated/main/java"
    }
}

application {
    mainClass = 'com.craftinginterpreters.lox.Lox'
}

run {
    standardInput = System.in
}


/*
 * TODO: Make this not rely on the lox module.
 *   It won't compile if there are errors in the module that depends on the code this task generates.
 * Use the following command to generate the code:
   java -cp "D:\src\jlox\src\main\java" \
   com.craftinginterpreters.tool.GenerateAst \
   D:\src\jlox\build\generated\main\java\com\craftinginterpreters\lox \
   Expr \
   "Binary   : Expr left, Token operator, Expr right" \
   "Grouping : Expr expression" \
   "Literal  : Object value" \
   "Unary    : Token operator, Expr right"
 */
tasks.register('generateAst', JavaExec) {
    description "Generate AST classes"
    mainClass = 'com.craftinginterpreters.tool.GenerateAst'
    classpath sourceSets.main.runtimeClasspath
    args = [
            "${buildDir}/generated/main/java/com/craftinginterpreters/lox",
            "Expr",
            "Binary   : Expr left, Token operator, Expr right",
            "Grouping : Expr expression",
            "Literal  : Object value",
            "Unary    : Token operator, Expr right"
    ]
}

def GenerateAst = "src/main/java/com/craftinginterpreters/tool/GenerateAst.java"
def outdir = "${buildDir}/generated/main/java/com/craftinginterpreters/lox"
// HACK: This is a hack to generate the AST classes before compiling the code. See above.
// Consider using `java -cp src/jlox/src/main/java

tasks.register('genAst') {
    description "Generates AST classes"
    dependsOn 'genExpr'
    dependsOn 'genStmt'
}

tasks.register('genExpr', Exec) {
    description "Generate Expr AST"
    commandLine "java", GenerateAst, outdir,
        "Expr",
        "Assign   : Token name, Expr value",
        "Binary   : Expr left, Token operator, Expr right",
        "Grouping : Expr expression",
        "Literal  : Object value",
        "Unary    : Token operator, Expr right",
        "Variable : Token name"
}

tasks.register('genStmt', Exec) {
    description "Generate Stmt AST"
    commandLine "java", GenerateAst, outdir,
        "Stmt",
        "Block      : List<Stmt> statements",
        "Expression : Expr expression",
        "Print      : Expr expression",
        "Var        : Token name, Expr initializer"
}

/*
// https://stackoverflow.com/a/29602484
tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn genSources
}
 */